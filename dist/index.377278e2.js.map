{"mappings":"AAAA,mBAAmB;AACnB,qFAAqF;AAGrF,cAAc;AACd,SAAS,IAAI,CAAS,EAAE,CAAS;IAC/B,OAAO,IAAI;AACb;AACA,QAAQ,GAAG,CAAC,IAAI,GAAG;AAGnB,aAAa;AACb,SAAS,UAAU,IAAY;IAC7B,OAAO,YAAY,OAAO;AAC5B;AAEA,aAAa;AACb,2FAA2F;AAC3F,SAAS,QAAQ,OAAiB;IAChC,OAAO,KAAK,GAAG,IAAI;AACrB;AASA,SAAS,eAAe,KAAY;IAClC,OAAO,MAAM,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,OAAS,QAAQ,KAAK,KAAK,EAAE;AACjE;AAEA,MAAM,QAAQ;IACZ,IAAI;IACJ,OAAO;IACP,OAAO;QACL;YAAE,IAAI;YAAG,OAAO;QAAI;QACpB;YAAE,IAAI;YAAI,OAAO;QAAG;QACpB;YAAE,IAAI;YAAK,OAAO;QAAI;KACvB;AACH;AAEA,QAAQ,GAAG,CAAC,eAAe,SAAS,cAAc;AAGlD,aAAa;AACb,SAAS,MAAM,EAAU;IACvB,OAAO,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;AACtD;AACA,QAAQ;AACR,MAAM,MAAM,IAAI,CAAC,IAAM,QAAQ,GAAG,CAAC;AAGnC,aAAa;AACb,eAAe,UAAa,GAAW;IACrC,MAAM,WAAW,MAAM,MAAM;IAC7B,OAAO,SAAS,IAAI;AACtB;AACA,QAAQ;AACR,UAAyC,gCACtC,IAAI,CAAC,CAAC,OAAS,QAAQ,GAAG,CAAC,KAAK,IAAI,EAAE,KAAK,GAAG;AAIjD,aAAa;AACX,eAAe,SAAY,GAAW,EAAE,IAAO;IAC/C,MAAM,WAAW,MAAM,MAAM,KAAK;QAChC,QAAQ;QACR,SAAS;YACP,gBAAgB;QAClB;QACA,MAAM,KAAK,SAAS,CAAC;IACvB;IACA,OAAO,SAAS,IAAI;AACtB;AAEA,QAAQ;AACR,SAAS,gCAAgC;IAAE,IAAI;IAAG,MAAM;AAAO,GAAG,IAAI,CAAC,CAAC,WACtE,QAAQ,GAAG,CAAC;AAYd,SAAS,eAAe,IAA+B;IACrD,OAAO;QACL,IAAI,KAAK,EAAE;QACX,MAAM,KAAK,IAAI;IACjB;AACF;AAEA,MAAM,OAAO;IACX,IAAI;IACJ,MAAM;IACN,OAAO;IACP,KAAK;AACP;AAEA,QAAQ,GAAG,CAAC,eAAe,QAAQ,mCAAmC;AAUtE,SAAS,YAAY,IAAiC;IACpD,OAAO;QACL,OAAO,KAAK,KAAK;QACjB,QAAQ,KAAK,MAAM;IACrB;AACF;AAEA,MAAM,OAAO;IACX,OAAO;IACP,QAAQ;IACR,MAAM;IACN,MAAM;AACR;AAEA,QAAQ,GAAG,CAAC,YAAY,QAAQ,uEAAuE;AAUvG,SAAS,cAAc,GAAgC;IACrD,OAAO;QACL,MAAM,IAAI,IAAI;QACd,OAAO,IAAI,KAAK;IAClB;AACF;AAEA,MAAM,MAAM;IACV,MAAM;IACN,OAAO;IACP,MAAM;IACN,OAAO;AACT;AAEA,QAAQ,GAAG,CAAC,cAAc,OAAO,+CAA+C","sources":["src/index.ts"],"sourcesContent":["// Exercises Week 2\n//https://github.com/fmw23-typescript/Week-2---Advanced-Typescript?tab=readme-ov-file\n\n\n// Exercise 1 \nfunction add(a: number, b: number): number {\n  return a + b;\n}\nconsole.log(add(5, 3));\n\n\n// Exercise 2\nfunction greetUser(name: string): string {\n  return \"Hello, \" + name + \"!\";\n}\n\n// Exercise 3\n//numbers bir number dizisi (number[]) olmalı ve en yüksek değeri number olarak döndürmeli.\nfunction findMax(numbers: number[]): number {\n  return Math.max(...numbers);\n}\n\n// Exercise 4\ntype Order = {\n  id: number;\n  title: string;\n  items: { id: number; price: number }[];\n};\n\nfunction calcOrderPrice(order: Order): number {\n  return order.items.reduce((total, item) => total + item.price, 0);\n}\n\nconst order = {\n  id: 123,\n  title: \"Order A\",\n  items: [\n    { id: 7, price: 100 },\n    { id: 33, price: 50 },\n    { id: 982, price: 175 },\n  ],\n};\n\nconsole.log(calcOrderPrice(order)); // Output: 325\n\n\n// Exercise 5\nfunction delay(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n// usage\ndelay(1000).then(() => console.log(\"wait 1 second\"));\n\n\n// Exercise 6\nasync function fetchData<T>(url: string): Promise<T> {\n  const response = await fetch(url);\n  return response.json();\n}\n// usage\nfetchData<{ name: string; age: number }>(\"https://api.example.com/user\")\n  .then((data) => console.log(data.name, data.age));\n\n\n\n// Exercise 7\n  async function saveData<T>(url: string, data: T): Promise<any> {\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n  return response.json();\n}\n\n// usage\nsaveData(\"https://api.example.com/save\", { id: 1, name: \"Test\" }).then((response) =>\n  console.log(response)\n);\n\n\n// Exercise 8\ntype User = {\n  id: number;\n  name: string;\n  email: string;\n  age: number;\n};\n\nfunction getUserSummary(user: Pick<User, \"id\" | \"name\">): Pick<User, \"id\" | \"name\"> {\n  return {\n    id: user.id,\n    name: user.name,\n  };\n}\n\nconst user = {\n  id: 1,\n  name: \"Alice\",\n  email: \"alice@example.com\",\n  age: 30,\n};\n\nconsole.log(getUserSummary(user)); // Output: { id: 1, name: \"Alice\" }\n\n// Exercise 9\ntype Book = {\n  title: string;\n  author: string;\n  year: number;\n  ISBN: string;\n};\n\nfunction getBookInfo(book: Omit<Book, \"year\" | \"ISBN\">): Omit<Book, \"year\" | \"ISBN\"> {\n  return {\n    title: book.title,\n    author: book.author,\n  };\n}\n\nconst book = {\n  title: \"The Great Gatsby\",\n  author: \"F. Scott Fitzgerald\",\n  year: 1925,\n  ISBN: \"9780743273565\",\n};\n\nconsole.log(getBookInfo(book)); // Output: { title: \"The Great Gatsby\", author: \"F. Scott Fitzgerald\" }\n\n// Exercise 10\ntype Car = {\n  make: string;\n  model: string;\n  year: number;\n  color: string;\n};\n\nfunction getCarDetails(car: Pick<Car, \"make\" | \"model\">): Pick<Car, \"make\" | \"model\"> {\n  return {\n    make: car.make,\n    model: car.model,\n  };\n}\n\nconst car = {\n  make: \"Toyota\",\n  model: \"Corolla\",\n  year: 2020,\n  color: \"blue\",\n};\n\nconsole.log(getCarDetails(car)); // Output: { make: \"Toyota\", model: \"Corolla\" }\n"],"names":[],"version":3,"file":"index.377278e2.js.map","sourceRoot":"/__parcel_source_root/"}